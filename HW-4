def rref(matrix):
    m = len(matrix)
    n = len(matrix[0])
    A = [row[:] for row in matrix]
    pivot_cols = []
    row = 0
    for col in range(n):
        pivot = None
        for r in range(row, m):
            if abs(A[r][col]) > 1e-12:
                pivot = r
                break
        if pivot is None:
            continue
        A[row], A[pivot] = A[pivot], A[row]
        pivot_cols.append(col)
        factor = A[row][col]
        A[row] = [a / factor for a in A[row]]
        for r in range(m):
            if r != row:
                factor = A[r][col]
                A[r] = [A[r][j] - factor * A[row][j] for j in range(n)]
        row += 1
        if row == m:
            break
    return A, pivot_cols

def null_space(matrix):
    R, pivot_cols = rref(matrix)
    m = len(R)
    n = len(R[0])
    free_cols = [j for j in range(n) if j not in pivot_cols]
    basis = []
    for free in free_cols:
        vec = [0]*n
        vec[free] = 1
        for i, col in enumerate(pivot_cols):
            vec[col] = -R[i][free]
        basis.append(vec)
    return basis

def transpose(matrix):
    return [list(row) for row in zip(*matrix)]

def print_matrix(matrix):
    for row in matrix:
        print(" ".join(f"{x:.6f}" for x in row))

def main():
    print("Enter the size of the square matrix (n):")
    n = int(input())
    if n <= 0:
        print("The matrix size must be a positive number.")
        return
    print("Enter the matrix row by row. Separate the numbers with spaces.")
    print("Example for a 3x3 matrix:")
    print("1 2 3")
    print("2 3 2")
    print("3 2 4")
    matrix = []
    for i in range(n):
        row = list(map(float, input().split()))
        if len(row) != n:
            print(f"Please enter exactly {n} numbers in each row.")
            return
        matrix.append(row)

    A_aug = []
    for i in range(n):
        row = list(matrix[i])
        for j in range(n):
            row.append(1.0 if i == j else 0.0)
        A_aug.append(row)
    singular = False
    for i in range(n):
        pivot_row = i
        for j in range(i+1, n):
            if abs(A_aug[j][i]) > abs(A_aug[pivot_row][i]):
                pivot_row = j
        if abs(A_aug[pivot_row][i]) < 1e-12:
            singular = True
            break
        if pivot_row != i:
            A_aug[i], A_aug[pivot_row] = A_aug[pivot_row], A_aug[i]
        pivot = A_aug[i][i]
        for j in range(2*n):
            A_aug[i][j] /= pivot
        for j in range(i+1, n):
            factor = A_aug[j][i]
            for k in range(2*n):
                A_aug[j][k] -= factor * A_aug[i][k]
    if not singular:
        for i in range(n-1, -1, -1):
            for j in range(i-1, -1, -1):
                factor = A_aug[j][i]
                for k in range(2*n):
                    A_aug[j][k] -= factor * A_aug[i][k]
        inv = [row[n:2*n] for row in A_aug]
        print("\nThe matrix is non-singular. Its inverse is:")
        print_matrix(inv)
        print("\nOrthogonal complement of the row space - null space of A:")
        ns = null_space(matrix)
        if ns:
            for vec in ns:
                print(" ".join(f"{x:.6f}" for x in vec))
        else:
            print("Only the zero vector.")
        print("\nOrthogonal complement of the column space - null space of Aᵀ:")
        nsT = null_space(transpose(matrix))
        if nsT:
            for vec in nsT:
                print(" ".join(f"{x:.6f}" for x in vec))
        else:
            print("Only the zero vector.")
    else:
        print("\nThe matrix is singular. Inverse does not exist.")
        R, pivot_cols = rref(matrix)
        row_space = [row for row in R if any(abs(x) > 1e-12 for x in row)]
        print("\nRow space basis:")
        if row_space:
            print_matrix(row_space)
        else:
            print("No non-zero rows found.")
        print("\nColumn space basis:")
        col_space = []
        for col in pivot_cols:
            col_space.append([matrix[i][col] for i in range(n)])
        if col_space:
            print_matrix(col_space)
        print("\nNull space (solutions of A*x = 0):")
        ns = null_space(matrix)
        if ns:
            for vec in ns:
                print(" ".join(f"{x:.6f}" for x in vec))
        else:
            print("Only the zero vector.")
        print("\nOrthogonal complement of the row space - null space of A:")
        if ns:
            for vec in ns:
                print(" ".join(f"{x:.6f}" for x in vec))
        else:
            print("Only the zero vector.")
        print("\nOrthogonal complement of the column space - null space of Aᵀ:")
        nsT = null_space(transpose(matrix))
        if nsT:
            for vec in nsT:
                print(" ".join(f"{x:.6f}" for x in vec))
        else:
            print("Only the zero vector.")

if __name__ == "__main__":
    main()
